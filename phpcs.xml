<?xml version="1.0"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         name="PHP_CodeSniffer"
         xsi:noNamespaceSchemaLocation="vendor/squizlabs/php_codesniffer/phpcs.xsd"
>
    <description>The coding standard for PHP_CodeSniffer itself.</description>
    <config name="ignore_warnings_on_exit" value="1"/>
    <file>src</file>
    <file>tests</file>

    <arg name="basepath" value="."/>
    <arg name="colors"/>
    <arg name="parallel" value="75"/>
    <arg value="p"/>


    <!-- Include the whole PEAR standard -->
    <rule ref="PEAR">
        <exclude name="PEAR.NamingConventions.ValidFunctionName"/>
        <exclude name="PEAR.NamingConventions.ValidVariableName"/>
        <exclude name="PEAR.Commenting.ClassComment"/>
        <exclude name="PEAR.Commenting.FileComment.MissingCategoryTag"/>
        <exclude name="PEAR.Commenting.FileComment.MissingPackageTag"/>
        <exclude name="PEAR.Commenting.FileComment.MissingLinkTag"/>
        <exclude name="PEAR.Commenting.FileComment.MissingVersion"/>
        <exclude name="PEAR.Commenting.InlineComment"/>
        <exclude name="Generic.Files.LineLength"/>
        <exclude name="PEAR.Commenting.FileComment.Missing"/>
        <exclude name="PEAR.Commenting.FunctionComment.MissingReturn"/>
        <exclude name="PEAR.Functions.FunctionCallSignature.ContentAfterOpenBracket"/>
        <exclude name="Generic.Formatting.SpaceAfterCast.NoSpace"/>
        <exclude name="PEAR.Functions.FunctionCallSignature.CloseBracketLine"/>
        <exclude name="Squiz.Commenting.ClosingDeclarationComment.Missing"/>
        <exclude name="PEAR.Commenting.FunctionComment.Missing"/>
        <exclude name="PEAR.Commenting.FunctionComment.MissingParamComment"/>
        <exclude name="Squiz.WhiteSpace.FunctionClosingBraceSpace.SpacingBeforeClose"/>
        <exclude name="Squiz.Arrays.ArrayDeclaration.KeySpecified"/>
        <exclude name="Squiz.Arrays.ArrayDeclaration.MultiLineNotAllowed"/>
        <exclude name="Squiz.PHP.DisallowInlineIf.Found"/>
        <exclude name="Generic.Commenting.DocComment.MissingShort"/>
        <exclude name="Squiz.Formatting.OperatorBracket.MissingBrackets"/>
        <exclude name="Squiz.NamingConventions.ValidVariableName.MemberNotCamelCaps"/>
        <exclude name="Squiz.Commenting.VariableComment.Missing"/>
        <exclude name="PEAR.Commenting.FunctionComment.MissingParamTag"/>
        <exclude name="Squiz.Operators.ComparisonOperatorUsage"/>
        <exclude name="PEAR.Functions.FunctionDeclaration.NewlineBeforeOpenBrace"/>
        <exclude name="PEAR.Functions.FunctionCallSignature.MultipleArguments"/>
        <exclude name="Generic.Commenting.DocComment.ContentAfterOpen"/>
        <exclude name="Squiz.Commenting.BlockComment.WrongStart"/>
        <exclude name="Squiz.Commenting.InlineComment.DocBlock"/>
        <exclude name="PEAR.Files.IncludingFile.UseInclude"/>
        <exclude name="Generic.Commenting.DocComment.ParamGroup"/>
        <exclude
                name="Squiz.Commenting.DocCommentAlignment.SpaceAfterStar"/> <!-- до переписывания сваггера на аттрибуты -->
        <exclude name="Generic.Commenting.DocComment.TagsNotGrouped"/>
        <exclude name="PEAR.Formatting.MultiLineAssignment.EqualSignLine"/>
        <exclude name="Generic.PHP.ForbiddenFunctions.Found"/>
        <exclude name="Squiz.Arrays.ArrayDeclaration.SingleLineNotAllowed"/>
        <exclude name="Squiz.Arrays.ArrayDeclaration.IndexNoNewline"/>
        <exclude name="Generic.Arrays.ArrayIndent.CloseBraceNotNewLine"/>
        <exclude name="Squiz.Arrays.ArrayDeclaration.NoKeySpecified"/>
        <exclude name="Generic.Commenting.DocComment.SpacingBeforeShort"/>
        <exclude name="Squiz.Commenting.BlockComment.WrongEnd"/>
        <exclude name="Squiz.NamingConventions.ValidVariableName.NotCamelCaps"/>
        <exclude name="Generic.Commenting.DocComment.LongNotCapital"/>
        <exclude name="Generic.Commenting.DocComment.ContentBeforeClose"/>
        <exclude name="PEAR.Commenting.FileComment.MissingAuthorTag"/>
        <exclude name="PEAR.Commenting.FileComment.MissingLicenseTag"/>


    </rule>

    <rule ref="Squiz.Commenting.BlockComment.NoEmptyLineBefore">
        <exclude-pattern>*config/*$</exclude-pattern>
    </rule>
    <rule ref="Generic.Commenting.DocComment.ShortNotCapital">
        <exclude-pattern>*config/*$</exclude-pattern>
    </rule>
    <rule ref="Squiz.Commenting.InlineComment.NotCapital">
        <exclude-pattern>*config/*$</exclude-pattern>
    </rule>
    <rule ref="Squiz.Commenting.InlineComment.InvalidEndChar">
        <exclude-pattern>*config/*$</exclude-pattern>
    </rule>

    <rule ref="Generic.Formatting.SpaceAfterNot"/>

    <!-- Include some sniffs from other standards that don't conflict with PEAR -->
    <rule ref="Squiz.Arrays.ArrayBracketSpacing"/>
    <rule ref="Squiz.Arrays.ArrayDeclaration"/>
    <rule ref="Squiz.Commenting.ClosingDeclarationComment"/>
    <rule ref="Squiz.ControlStructures.ControlSignature"/>
    <rule ref="Squiz.ControlStructures.ElseIfDeclaration"/>
    <rule ref="Squiz.Commenting.BlockComment"/>
    <rule ref="Squiz.Commenting.DocCommentAlignment"/>
    <rule ref="Squiz.Commenting.EmptyCatchComment"/>
    <rule ref="Squiz.Commenting.InlineComment"/>
    <rule ref="Squiz.Commenting.LongConditionClosingComment"/>
    <rule ref="Squiz.Commenting.PostStatementComment"/>
    <rule ref="Squiz.Commenting.VariableComment"/>
    <rule ref="Squiz.Formatting.OperatorBracket"/>
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing"/>
    <rule ref="Squiz.Operators.ComparisonOperatorUsage"/>
    <rule ref="Squiz.PHP.DisallowInlineIf"/>
    <rule ref="Squiz.Scope.MethodScope"/>
    <rule ref="Squiz.Strings.ConcatenationSpacing"/>
    <rule ref="Squiz.WhiteSpace.ControlStructureSpacing"/>
    <rule ref="Squiz.WhiteSpace.FunctionClosingBraceSpace"/>
    <rule ref="Squiz.WhiteSpace.FunctionSpacing"/>
    <rule ref="Squiz.WhiteSpace.MemberVarSpacing"/>
    <rule ref="Squiz.WhiteSpace.OperatorSpacing"/>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace"/>
    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>
    <rule ref="Generic.Commenting.Todo"/>
    <rule ref="Generic.ControlStructures.DisallowYodaConditions"/>
    <rule ref="Generic.ControlStructures.InlineControlStructure"/>
    <rule ref="Generic.Formatting.DisallowMultipleStatements"/>
    <rule ref="Generic.Formatting.SpaceAfterCast"/>
    <rule ref="Generic.NamingConventions.ConstructorName"/>
    <rule ref="Generic.PHP.DeprecatedFunctions"/>
    <rule ref="Generic.PHP.LowerCaseKeyword"/>
    <rule ref="Generic.Strings.UnnecessaryStringConcat"/>
    <rule ref="Generic.WhiteSpace.IncrementDecrementSpacing"/>
    <rule ref="PSR2.Classes.PropertyDeclaration"/>
    <rule ref="PSR2.Methods.MethodDeclaration"/>
    <rule ref="PSR2.Files.EndFileNewline"/>
    <rule ref="PSR12.Files.OpenTag"/>
    <rule ref="Zend.Files.ClosingTag"/>
    <rule ref="Squiz.WhiteSpace.FunctionSpacing"/>
    <!-- We use custom indent rules for arrays -->
    <rule ref="Generic.Arrays.ArrayIndent"/>
    <rule ref="Squiz.Arrays.ArrayDeclaration.KeyNotAligned">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Arrays.ArrayDeclaration.ValueNotAligned">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.Arrays.ArrayDeclaration.CloseBraceNewLine">
        <severity>0</severity>
    </rule>
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
        <exclude-pattern>tests/*\.php$</exclude-pattern>
    </rule>
    <!-- Don't enforce single line arrays for single item arrays in test files. Readability over brevity. -->
    <rule ref="Squiz.Arrays.ArrayDeclaration.MultiLineNotAllowed">
        <exclude-pattern>tests/*\.php$</exclude-pattern>
        <exclude-pattern>Standards/*/Tests/*/*UnitTest\.php$</exclude-pattern>
        <exclude-pattern>app/UseCases/*.php$</exclude-pattern>
    </rule>

    <!-- Check var names, but we don't want leading underscores for private vars -->
    <rule ref="Squiz.NamingConventions.ValidVariableName"/>
    <rule ref="Squiz.NamingConventions.ValidVariableName.PrivateNoUnderscore">
        <severity>0</severity>
    </rule>

    <!-- Only one argument per line in multi-line function calls -->
    <rule ref="PEAR.Functions.FunctionCallSignature">
        <properties>
            <property name="allowMultipleArguments" value="false"/>
        </properties>
    </rule>

    <!-- Have 12 chars padding maximum -->
    <rule ref="Generic.Formatting.MultipleStatementAlignment">

    </rule>

    <!-- Do not allow unreachable code. -->
    <rule ref="Squiz.PHP.NonExecutableCode"/>

    <!-- Do not allow ambiguous conditions. -->
    <rule ref="Generic.CodeAnalysis.RequireExplicitBooleanOperatorPrecedence"/>

    <!-- The testing bootstrap file uses string concats to stop IDEs seeing the class aliases -->
    <rule ref="Generic.Strings.UnnecessaryStringConcat">
        <exclude-pattern>tests/bootstrap\.php</exclude-pattern>
    </rule>

    <!-- This test file specifically *needs* Windows line endings for testing purposes. -->
    <rule ref="Generic.Files.LineEndings.InvalidEOLChar">
        <exclude-pattern>tests/Core/Tokenizer/StableCommentWhitespaceWinTest\.php</exclude-pattern>
    </rule>

    <!-- Avoid false positive with this sniff detecting itself -->
    <rule ref="Generic.Commenting.Todo">
        <exclude-pattern>src/Standards/Generic/Sniffs/Commenting/TodoSniff\.php</exclude-pattern>
        <exclude-pattern>src/Standards/Generic/Tests/Commenting/TodoUnitTest\.php</exclude-pattern>
    </rule>

    <!-- @see https://github.com/PHPCSStandards/PHP_CodeSniffer/pull/122#discussion_r1414167897 -->
    <rule ref="Squiz.Commenting.VariableComment">
        <exclude-pattern>src/Util/Tokens\.php</exclude-pattern>
    </rule>
</ruleset>
